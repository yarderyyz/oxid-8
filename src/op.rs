use std::fmt;

#[derive(Clone, Copy, PartialEq, Eq)]
pub enum ChipOp {
    Cls,
    Ret,
    JpNnn { nnn: usize },
    CallNnn { nnn: usize },
    SeVxNn { x: usize, nn: u8 },
    SneVxNn { x: usize, nn: u8 },
    SeVxVy { x: usize, y: usize },
    LdVxNn { x: usize, nn: u8 },
    AddVxNn { x: usize, nn: u8 },
    LdVxVy { x: usize, y: usize },
    OrVxVy { x: usize, y: usize },
    AndVxVy { x: usize, y: usize },
    XorVxVy { x: usize, y: usize },
    AddVxVy { x: usize, y: usize },
    SubVxVy { x: usize, y: usize },
    ShrVxVy { x: usize, y: usize },
    SubnVxVy { x: usize, y: usize },
    ShlVxVy { x: usize, y: usize },
    SneVxVy { x: usize, y: usize },
    LdINnn { nnn: usize },
    JpV0Nnn { nnn: u16 },
    RndVxNn { x: usize, nn: u8 },
    DrwVxVyN { x: usize, y: usize, n: u8 },
    SkpVx { x: usize },
    SknpVx { x: usize },
    LdVxDt { x: usize },
    LdVxK { x: usize },
    LdDtVx { x: usize },
    LdStVx { x: usize },
    AddIVx { x: usize },
    LdFVx { x: usize },
    LdBVx { x: usize },
    LdIVx { x: usize },
    LdVxI { x: usize },
    Unknown(u16),
}

impl fmt::Debug for ChipOp {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        use ChipOp::*;
        let name = match self {
            Cls => "Cls",
            Ret => "Ret",
            JpNnn { .. } => "JpNnn",
            CallNnn { .. } => "CallNnn",
            SeVxNn { .. } => "SeVxNn",
            SneVxNn { .. } => "SneVxNn",
            SeVxVy { .. } => "SeVxVy",
            LdVxNn { .. } => "LdVxNn",
            AddVxNn { .. } => "AddVxNn",
            LdVxVy { .. } => "LdVxVy",
            OrVxVy { .. } => "OrVxVy",
            AndVxVy { .. } => "AndVxVy",
            XorVxVy { .. } => "XorVxVy",
            AddVxVy { .. } => "AddVxVy",
            SubVxVy { .. } => "SubVxVy",
            ShrVxVy { .. } => "ShrVxVy",
            SubnVxVy { .. } => "SubnVxVy",
            ShlVxVy { .. } => "ShlVxVy",
            SneVxVy { .. } => "SneVxVy",
            LdINnn { .. } => "LdINnn",
            JpV0Nnn { .. } => "JpV0Nnn",
            RndVxNn { .. } => "RndVxNn",
            DrwVxVyN { .. } => "DrwVxVyN",
            SkpVx { .. } => "SkpVx",
            SknpVx { .. } => "SknpVx",
            LdVxDt { .. } => "LdVxDt",
            LdVxK { .. } => "LdVxK",
            LdDtVx { .. } => "LdDtVx",
            LdStVx { .. } => "LdStVx",
            AddIVx { .. } => "AddIVx",
            LdFVx { .. } => "LdFVx",
            LdBVx { .. } => "LdBVx",
            LdIVx { .. } => "LdIVx",
            LdVxI { .. } => "LdVxI",
            Unknown(_) => "Unknown",
        };
        f.write_str(name)
    }
}

impl fmt::Display for ChipOp {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        use ChipOp::*;
        match *self {
            Cls => write!(f, "CLS"),
            Ret => write!(f, "RET"),
            JpNnn { nnn } => write!(f, "JP {nnn:#05X}"),
            CallNnn { nnn } => write!(f, "CALL {nnn:#05X}"),
            SeVxNn { x, nn } => write!(f, "SE V{x:X}, {nn:#04X}"),
            SneVxNn { x, nn } => write!(f, "SNE V{x:X}, {nn:#04X}"),
            SeVxVy { x, y } => write!(f, "SE V{x:X}, V{y:X}"),
            LdVxNn { x, nn } => write!(f, "LD V{x:X}, {nn:#04X}"),
            AddVxNn { x, nn } => write!(f, "ADD V{x:X}, {nn:#04X}"),
            LdVxVy { x, y } => write!(f, "LD V{x:X}, V{y:X}"),
            OrVxVy { x, y } => write!(f, "OR V{x:X}, V{y:X}"),
            AndVxVy { x, y } => write!(f, "AND V{x:X}, V{y:X}"),
            XorVxVy { x, y } => write!(f, "XOR V{x:X}, V{y:X}"),
            AddVxVy { x, y } => write!(f, "ADD V{x:X}, V{y:X}"),
            SubVxVy { x, y } => write!(f, "SUB V{x:X}, V{y:X}"),
            ShrVxVy { x, y } => write!(f, "SHR V{x:X}, V{y:X}"),
            SubnVxVy { x, y } => write!(f, "SUBN V{x:X}, V{y:X}"),
            ShlVxVy { x, y } => write!(f, "SHL V{x:X}, V{y:X}"),
            SneVxVy { x, y } => write!(f, "SNE V{x:X}, V{y:X}"),
            LdINnn { nnn } => write!(f, "LD I, {nnn:#05X}"),
            JpV0Nnn { nnn } => write!(f, "JP V0, {nnn:#05X}"),
            RndVxNn { x, nn } => write!(f, "RND V{x:X}, {nn:#04X}"),
            DrwVxVyN { x, y, n } => write!(f, "DRW V{x:X}, V{y:X}, {n:#X}"),
            SkpVx { x } => write!(f, "SKP V{x:X}"),
            SknpVx { x } => write!(f, "SKNP V{x:X}"),
            LdVxDt { x } => write!(f, "LD V{x:X}, DT"),
            LdVxK { x } => write!(f, "LD V{x:X}, K"),
            LdDtVx { x } => write!(f, "LD DT, V{x:X}"),
            LdStVx { x } => write!(f, "LD ST, V{x:X}"),
            AddIVx { x } => write!(f, "ADD I, V{x:X}"),
            LdFVx { x } => write!(f, "LD F, V{x:X}"),
            LdBVx { x } => write!(f, "LD B, V{x:X}"),
            LdIVx { x } => write!(f, "LD [I], V{x:X}"),
            LdVxI { x } => write!(f, "LD V{x:X}, [I]"),
            Unknown(op) => write!(f, "DB {op:#06X}"),
        }
    }
}
