use std::fmt;

#[derive(Clone, Copy, PartialEq, Eq)]
pub enum ChipOp {
    Cls,
    Ret,
    Jp { nnn: usize },
    Call { nnn: usize },
    Se { x: usize, nn: u8 },
    Sne { x: usize, nn: u8 },
    Ser { x: usize, y: usize },
    Ld { x: usize, nn: u8 },
    Add { x: usize, nn: u8 },
    Ldr { x: usize, y: usize },
    Orr { x: usize, y: usize },
    Andr { x: usize, y: usize },
    Xorr { x: usize, y: usize },
    Addr { x: usize, y: usize },
    Subr { x: usize, y: usize },
    Shrr { x: usize, y: usize },
    Subnr { x: usize, y: usize },
    Shlr { x: usize, y: usize },
    Sner { x: usize, y: usize },
    Ldi { nnn: usize },
    Jpo { nnn: u16 },
    Rnd { x: usize, nn: u8 },
    Drw { x: usize, y: usize, n: u8 },
    Skp { x: usize },
    Sknp { x: usize },
    Lddv { x: usize },
    Ldk { x: usize },
    Ldvd { x: usize },
    Ldsv { x: usize },
    Addi { x: usize },
    Ldfv { x: usize },
    Ldbv { x: usize },
    Ldiv { x: usize },
    Ldvi { x: usize },
    Unknown(u16),
}

impl fmt::Debug for ChipOp {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        use ChipOp::*;
        let name = match self {
            Cls => "Cls",
            Ret => "Ret",
            Jp { .. } => "Jp",
            Call { .. } => "Call",
            Se { .. } => "Se",
            Sne { .. } => "Sne",
            Ser { .. } => "Ser",
            Ld { .. } => "Ld",
            Add { .. } => "Add",
            Ldr { .. } => "Ldr",
            Orr { .. } => "Orr",
            Andr { .. } => "Andr",
            Xorr { .. } => "Xorr",
            Addr { .. } => "Addr",
            Subr { .. } => "Subr",
            Shrr { .. } => "Shrr",
            Subnr { .. } => "Subnr",
            Shlr { .. } => "Shlr",
            Sner { .. } => "Sner",
            Ldi { .. } => "Ldi",
            Jpo { .. } => "Jpo",
            Rnd { .. } => "Rnd",
            Drw { .. } => "Drw",
            Skp { .. } => "Skp",
            Sknp { .. } => "Sknp",
            Lddv { .. } => "Lddv",
            Ldk { .. } => "Ldk",
            Ldvd { .. } => "Ldvd",
            Ldsv { .. } => "Ldsv",
            Addi { .. } => "Addi",
            Ldfv { .. } => "Ldfv",
            Ldbv { .. } => "Ldbv",
            Ldiv { .. } => "Ldiv",
            Ldvi { .. } => "Ldvi",
            Unknown(_) => "Unknown",
        };
        f.write_str(name)
    }
}

impl fmt::Display for ChipOp {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        use ChipOp::*;
        match *self {
            Cls => write!(f, "CLS"),
            Ret => write!(f, "RET"),
            Jp { nnn } => write!(f, "JP {nnn:#05X}"),
            Call { nnn } => write!(f, "CALL {nnn:#05X}"),
            Se { x, nn } => write!(f, "SE V{x:X}, {nn:#04X}"),
            Sne { x, nn } => write!(f, "SNE V{x:X}, {nn:#04X}"),
            Ser { x, y } => write!(f, "SE V{x:X}, V{y:X}"),
            Ld { x, nn } => write!(f, "LD V{x:X}, {nn:#04X}"),
            Add { x, nn } => write!(f, "ADD V{x:X}, {nn:#04X}"),
            Ldr { x, y } => write!(f, "LD V{x:X}, V{y:X}"),
            Orr { x, y } => write!(f, "OR V{x:X}, V{y:X}"),
            Andr { x, y } => write!(f, "AND V{x:X}, V{y:X}"),
            Xorr { x, y } => write!(f, "XOR V{x:X}, V{y:X}"),
            Addr { x, y } => write!(f, "ADD V{x:X}, V{y:X}"),
            Subr { x, y } => write!(f, "SUB V{x:X}, V{y:X}"),
            Shrr { x, y } => write!(f, "SHR V{x:X}, V{y:X}"),
            Subnr { x, y } => write!(f, "SUBN V{x:X}, V{y:X}"),
            Shlr { x, y } => write!(f, "SHL V{x:X}, V{y:X}"),
            Sner { x, y } => write!(f, "SNE V{x:X}, V{y:X}"),
            Ldi { nnn } => write!(f, "LD I, {nnn:#05X}"),
            Jpo { nnn } => write!(f, "JP V0, {nnn:#05X}"),
            Rnd { x, nn } => write!(f, "RND V{x:X}, {nn:#04X}"),
            Drw { x, y, n } => write!(f, "DRW V{x:X}, V{y:X}, {n:#X}"),
            Skp { x } => write!(f, "SKP V{x:X}"),
            Sknp { x } => write!(f, "SKNP V{x:X}"),
            Lddv { x } => write!(f, "LD V{x:X}, DT"),
            Ldk { x } => write!(f, "LD V{x:X}, K"),
            Ldvd { x } => write!(f, "LD DT, V{x:X}"),
            Ldsv { x } => write!(f, "LD ST, V{x:X}"),
            Addi { x } => write!(f, "ADD I, V{x:X}"),
            Ldfv { x } => write!(f, "LD F, V{x:X}"),
            Ldbv { x } => write!(f, "LD B, V{x:X}"),
            Ldiv { x } => write!(f, "LD [I], V{x:X}"),
            Ldvi { x } => write!(f, "LD V{x:X}, [I]"),
            Unknown(op) => write!(f, "DB {op:#06X}"),
        }
    }
}
